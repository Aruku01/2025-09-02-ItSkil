// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for SpeakerSupportPermittedSynthesisMorphing.
const (
	ALL      SpeakerSupportPermittedSynthesisMorphing = "ALL"
	NOTHING  SpeakerSupportPermittedSynthesisMorphing = "NOTHING"
	SELFONLY SpeakerSupportPermittedSynthesisMorphing = "SELF_ONLY"
)

// Defines values for WordTypes.
const (
	ADJECTIVE  WordTypes = "ADJECTIVE"
	COMMONNOUN WordTypes = "COMMON_NOUN"
	PROPERNOUN WordTypes = "PROPER_NOUN"
	SUFFIX     WordTypes = "SUFFIX"
	VERB       WordTypes = "VERB"
)

// AccentPhrase アクセント句ごとの情報
type AccentPhrase struct {
	Accent          int    `json:"accent"`
	IsInterrogative *bool  `json:"is_interrogative,omitempty"`
	Moras           []Mora `json:"moras"`
	PauseMora       *Mora  `json:"pause_mora,omitempty"`
}

// AudioQuery 音声合成用のクエリ
type AudioQuery struct {
	AccentPhrases      []AccentPhrase `json:"accent_phrases"`
	IntonationScale    float32        `json:"intonationScale"`
	Kana               *string        `json:"kana,omitempty"`
	OutputSamplingRate int            `json:"outputSamplingRate"`
	OutputStereo       bool           `json:"outputStereo"`
	PitchScale         float32        `json:"pitchScale"`
	PostPhonemeLength  float32        `json:"postPhonemeLength"`
	PrePhonemeLength   float32        `json:"prePhonemeLength"`
	SpeedScale         float32        `json:"speedScale"`
	VolumeScale        float32        `json:"volumeScale"`
}

// BodySettingPostSettingPost defines model for Body_setting_post_setting_post.
type BodySettingPostSettingPost struct {
	AllowOrigin    *string `json:"allow_origin,omitempty"`
	CorsPolicyMode *string `json:"cors_policy_mode,omitempty"`
}

// DownloadableLibrary ダウンロード可能な音声ライブラリの情報
type DownloadableLibrary struct {
	Bytes       int              `json:"bytes"`
	DownloadUrl string           `json:"download_url"`
	Name        string           `json:"name"`
	Speakers    []LibrarySpeaker `json:"speakers"`
	Uuid        string           `json:"uuid"`
	Version     string           `json:"version"`
}

// EngineManifest エンジン自体に関する情報
type EngineManifest struct {
	BrandName                     string            `json:"brand_name"`
	DefaultSamplingRate           int               `json:"default_sampling_rate"`
	DependencyLicenses            []LicenseInfo     `json:"dependency_licenses"`
	Icon                          string            `json:"icon"`
	ManifestVersion               string            `json:"manifest_version"`
	Name                          string            `json:"name"`
	SupportedFeatures             SupportedFeatures `json:"supported_features"`
	SupportedVvlibManifestVersion *string           `json:"supported_vvlib_manifest_version,omitempty"`
	TermsOfService                string            `json:"terms_of_service"`
	UpdateInfos                   []UpdateInfo      `json:"update_infos"`
	Url                           string            `json:"url"`
	Uuid                          string            `json:"uuid"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// InstalledLibrary インストール済み音声ライブラリの情報
type InstalledLibrary struct {
	Bytes         int              `json:"bytes"`
	DownloadUrl   string           `json:"download_url"`
	Name          string           `json:"name"`
	Speakers      []LibrarySpeaker `json:"speakers"`
	Uninstallable bool             `json:"uninstallable"`
	Uuid          string           `json:"uuid"`
	Version       string           `json:"version"`
}

// LibrarySpeaker 音声ライブラリに含まれる話者の情報
type LibrarySpeaker struct {
	Speaker     Speaker     `json:"speaker"`
	SpeakerInfo SpeakerInfo `json:"speaker_info"`
}

// LicenseInfo 依存ライブラリのライセンス情報
type LicenseInfo struct {
	License *string `json:"license,omitempty"`
	Name    string  `json:"name"`
	Text    string  `json:"text"`
	Version *string `json:"version,omitempty"`
}

// Mora モーラ（子音＋母音）ごとの情報
type Mora struct {
	Consonant       *string  `json:"consonant,omitempty"`
	ConsonantLength *float32 `json:"consonant_length,omitempty"`
	Pitch           float32  `json:"pitch"`
	Text            string   `json:"text"`
	Vowel           string   `json:"vowel"`
	VowelLength     float32  `json:"vowel_length"`
}

// MorphableTargetInfo defines model for MorphableTargetInfo.
type MorphableTargetInfo struct {
	IsMorphable bool `json:"is_morphable"`
}

// ParseKanaBadRequest defines model for ParseKanaBadRequest.
type ParseKanaBadRequest struct {
	ErrorArgs map[string]string `json:"error_args"`

	// ErrorName |name|description|
	// |---|---|
	// | UNKNOWN_TEXT | 判別できない読み仮名があります: {text} |
	// | ACCENT_TOP | 句頭にアクセントは置けません: {text} |
	// | ACCENT_TWICE | 1つのアクセント句に二つ以上のアクセントは置けません: {text} |
	// | ACCENT_NOTFOUND | アクセントを指定していないアクセント句があります: {text} |
	// | EMPTY_PHRASE | {position}番目のアクセント句が空白です |
	// | INTERROGATION_MARK_NOT_AT_END | アクセント句末以外に「？」は置けません: {text} |
	// | INFINITE_LOOP | 処理時に無限ループになってしまいました...バグ報告をお願いします。 |
	ErrorName string `json:"error_name"`
	Text      string `json:"text"`
}

// Preset プリセット情報
type Preset struct {
	Id                int     `json:"id"`
	IntonationScale   float32 `json:"intonationScale"`
	Name              string  `json:"name"`
	PitchScale        float32 `json:"pitchScale"`
	PostPhonemeLength float32 `json:"postPhonemeLength"`
	PrePhonemeLength  float32 `json:"prePhonemeLength"`
	SpeakerUuid       string  `json:"speaker_uuid"`
	SpeedScale        float32 `json:"speedScale"`
	StyleId           int     `json:"style_id"`
	VolumeScale       float32 `json:"volumeScale"`
}

// Speaker スピーカー情報
type Speaker struct {
	Name              string                    `json:"name"`
	SpeakerUuid       string                    `json:"speaker_uuid"`
	Styles            []SpeakerStyle            `json:"styles"`
	SupportedFeatures *SpeakerSupportedFeatures `json:"supported_features,omitempty"`
	Version           *string                   `json:"version,omitempty"`
}

// SpeakerInfo 話者の追加情報
type SpeakerInfo struct {
	Policy     string      `json:"policy"`
	Portrait   string      `json:"portrait"`
	StyleInfos []StyleInfo `json:"style_infos"`
}

// SpeakerStyle スピーカーのスタイル情報
type SpeakerStyle struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// SpeakerSupportPermittedSynthesisMorphing An enumeration.
type SpeakerSupportPermittedSynthesisMorphing string

// SpeakerSupportedFeatures 話者の対応機能の情報
type SpeakerSupportedFeatures struct {
	PermittedSynthesisMorphing *SpeakerSupportPermittedSynthesisMorphing `json:"permitted_synthesis_morphing,omitempty"`
}

// StyleInfo スタイルの追加情報
type StyleInfo struct {
	Icon         string   `json:"icon"`
	Id           int      `json:"id"`
	Portrait     *string  `json:"portrait,omitempty"`
	VoiceSamples []string `json:"voice_samples"`
}

// SupportedDevicesInfo 対応しているデバイスの情報
type SupportedDevicesInfo struct {
	Cpu  bool `json:"cpu"`
	Cuda bool `json:"cuda"`
	Dml  bool `json:"dml"`
}

// SupportedFeatures エンジンが持つ機能の一覧
type SupportedFeatures struct {
	AdjustIntonationScale bool  `json:"adjust_intonation_scale"`
	AdjustMoraPitch       bool  `json:"adjust_mora_pitch"`
	AdjustPhonemeLength   bool  `json:"adjust_phoneme_length"`
	AdjustPitchScale      bool  `json:"adjust_pitch_scale"`
	AdjustSpeedScale      bool  `json:"adjust_speed_scale"`
	AdjustVolumeScale     bool  `json:"adjust_volume_scale"`
	InterrogativeUpspeak  bool  `json:"interrogative_upspeak"`
	ManageLibrary         *bool `json:"manage_library,omitempty"`
	SynthesisMorphing     bool  `json:"synthesis_morphing"`
}

// UpdateInfo エンジンのアップデート情報
type UpdateInfo struct {
	Contributors *[]string `json:"contributors,omitempty"`
	Descriptions []string  `json:"descriptions"`
	Version      string    `json:"version"`
}

// UserDictWord 辞書のコンパイルに使われる情報
type UserDictWord struct {
	AccentAssociativeRule string `json:"accent_associative_rule"`
	AccentType            int    `json:"accent_type"`
	ContextId             *int   `json:"context_id,omitempty"`
	InflectionalForm      string `json:"inflectional_form"`
	InflectionalType      string `json:"inflectional_type"`
	MoraCount             *int   `json:"mora_count,omitempty"`
	PartOfSpeech          string `json:"part_of_speech"`
	PartOfSpeechDetail1   string `json:"part_of_speech_detail_1"`
	PartOfSpeechDetail2   string `json:"part_of_speech_detail_2"`
	PartOfSpeechDetail3   string `json:"part_of_speech_detail_3"`
	Priority              int    `json:"priority"`
	Pronunciation         string `json:"pronunciation"`
	Stem                  string `json:"stem"`
	Surface               string `json:"surface"`
	Yomi                  string `json:"yomi"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []string `json:"loc"`
	Msg  string   `json:"msg"`
	Type string   `json:"type"`
}

// WordTypes fastapiでword_type引数を検証する時に使用するクラス
type WordTypes string

// AccentPhrasesAccentPhrasesPostParams defines parameters for AccentPhrasesAccentPhrasesPost.
type AccentPhrasesAccentPhrasesPostParams struct {
	Text        string  `form:"text" json:"text"`
	Speaker     int     `form:"speaker" json:"speaker"`
	IsKana      *bool   `form:"is_kana,omitempty" json:"is_kana,omitempty"`
	CoreVersion *string `form:"core_version,omitempty" json:"core_version,omitempty"`
}

// AudioQueryAudioQueryPostParams defines parameters for AudioQueryAudioQueryPost.
type AudioQueryAudioQueryPostParams struct {
	Text        string  `form:"text" json:"text"`
	Speaker     int     `form:"speaker" json:"speaker"`
	CoreVersion *string `form:"core_version,omitempty" json:"core_version,omitempty"`
}

// AudioQueryFromPresetAudioQueryFromPresetPostParams defines parameters for AudioQueryFromPresetAudioQueryFromPresetPost.
type AudioQueryFromPresetAudioQueryFromPresetPostParams struct {
	Text        string  `form:"text" json:"text"`
	PresetId    int     `form:"preset_id" json:"preset_id"`
	CoreVersion *string `form:"core_version,omitempty" json:"core_version,omitempty"`
}

// CancellableSynthesisCancellableSynthesisPostParams defines parameters for CancellableSynthesisCancellableSynthesisPost.
type CancellableSynthesisCancellableSynthesisPostParams struct {
	Speaker     int     `form:"speaker" json:"speaker"`
	CoreVersion *string `form:"core_version,omitempty" json:"core_version,omitempty"`
}

// ConnectWavesConnectWavesPostJSONBody defines parameters for ConnectWavesConnectWavesPost.
type ConnectWavesConnectWavesPostJSONBody = []string

// DeletePresetDeletePresetPostParams defines parameters for DeletePresetDeletePresetPost.
type DeletePresetDeletePresetPostParams struct {
	Id int `form:"id" json:"id"`
}

// ImportUserDictWordsImportUserDictPostJSONBody defines parameters for ImportUserDictWordsImportUserDictPost.
type ImportUserDictWordsImportUserDictPostJSONBody map[string]UserDictWord

// ImportUserDictWordsImportUserDictPostParams defines parameters for ImportUserDictWordsImportUserDictPost.
type ImportUserDictWordsImportUserDictPostParams struct {
	Override bool `form:"override" json:"override"`
}

// InitializeSpeakerInitializeSpeakerPostParams defines parameters for InitializeSpeakerInitializeSpeakerPost.
type InitializeSpeakerInitializeSpeakerPostParams struct {
	Speaker int `form:"speaker" json:"speaker"`

	// SkipReinit 既に初期化済みの話者の再初期化をスキップするかどうか
	SkipReinit  *bool   `form:"skip_reinit,omitempty" json:"skip_reinit,omitempty"`
	CoreVersion *string `form:"core_version,omitempty" json:"core_version,omitempty"`
}

// IsInitializedSpeakerIsInitializedSpeakerGetParams defines parameters for IsInitializedSpeakerIsInitializedSpeakerGet.
type IsInitializedSpeakerIsInitializedSpeakerGetParams struct {
	Speaker     int     `form:"speaker" json:"speaker"`
	CoreVersion *string `form:"core_version,omitempty" json:"core_version,omitempty"`
}

// MoraDataMoraDataPostJSONBody defines parameters for MoraDataMoraDataPost.
type MoraDataMoraDataPostJSONBody = []AccentPhrase

// MoraDataMoraDataPostParams defines parameters for MoraDataMoraDataPost.
type MoraDataMoraDataPostParams struct {
	Speaker     int     `form:"speaker" json:"speaker"`
	CoreVersion *string `form:"core_version,omitempty" json:"core_version,omitempty"`
}

// MoraLengthMoraLengthPostJSONBody defines parameters for MoraLengthMoraLengthPost.
type MoraLengthMoraLengthPostJSONBody = []AccentPhrase

// MoraLengthMoraLengthPostParams defines parameters for MoraLengthMoraLengthPost.
type MoraLengthMoraLengthPostParams struct {
	Speaker     int     `form:"speaker" json:"speaker"`
	CoreVersion *string `form:"core_version,omitempty" json:"core_version,omitempty"`
}

// MoraPitchMoraPitchPostJSONBody defines parameters for MoraPitchMoraPitchPost.
type MoraPitchMoraPitchPostJSONBody = []AccentPhrase

// MoraPitchMoraPitchPostParams defines parameters for MoraPitchMoraPitchPost.
type MoraPitchMoraPitchPostParams struct {
	Speaker     int     `form:"speaker" json:"speaker"`
	CoreVersion *string `form:"core_version,omitempty" json:"core_version,omitempty"`
}

// MorphableTargetsMorphableTargetsPostJSONBody defines parameters for MorphableTargetsMorphableTargetsPost.
type MorphableTargetsMorphableTargetsPostJSONBody = []int

// MorphableTargetsMorphableTargetsPostParams defines parameters for MorphableTargetsMorphableTargetsPost.
type MorphableTargetsMorphableTargetsPostParams struct {
	CoreVersion *string `form:"core_version,omitempty" json:"core_version,omitempty"`
}

// MultiSynthesisMultiSynthesisPostJSONBody defines parameters for MultiSynthesisMultiSynthesisPost.
type MultiSynthesisMultiSynthesisPostJSONBody = []AudioQuery

// MultiSynthesisMultiSynthesisPostParams defines parameters for MultiSynthesisMultiSynthesisPost.
type MultiSynthesisMultiSynthesisPostParams struct {
	Speaker     int     `form:"speaker" json:"speaker"`
	CoreVersion *string `form:"core_version,omitempty" json:"core_version,omitempty"`
}

// SpeakerInfoSpeakerInfoGetParams defines parameters for SpeakerInfoSpeakerInfoGet.
type SpeakerInfoSpeakerInfoGetParams struct {
	SpeakerUuid string  `form:"speaker_uuid" json:"speaker_uuid"`
	CoreVersion *string `form:"core_version,omitempty" json:"core_version,omitempty"`
}

// SpeakersSpeakersGetParams defines parameters for SpeakersSpeakersGet.
type SpeakersSpeakersGetParams struct {
	CoreVersion *string `form:"core_version,omitempty" json:"core_version,omitempty"`
}

// SupportedDevicesSupportedDevicesGetParams defines parameters for SupportedDevicesSupportedDevicesGet.
type SupportedDevicesSupportedDevicesGetParams struct {
	CoreVersion *string `form:"core_version,omitempty" json:"core_version,omitempty"`
}

// SynthesisSynthesisPostParams defines parameters for SynthesisSynthesisPost.
type SynthesisSynthesisPostParams struct {
	Speaker int `form:"speaker" json:"speaker"`

	// EnableInterrogativeUpspeak 疑問系のテキストが与えられたら語尾を自動調整する
	EnableInterrogativeUpspeak *bool   `form:"enable_interrogative_upspeak,omitempty" json:"enable_interrogative_upspeak,omitempty"`
	CoreVersion                *string `form:"core_version,omitempty" json:"core_version,omitempty"`
}

// SynthesisMorphingSynthesisMorphingPostParams defines parameters for SynthesisMorphingSynthesisMorphingPost.
type SynthesisMorphingSynthesisMorphingPostParams struct {
	BaseSpeaker   int     `form:"base_speaker" json:"base_speaker"`
	TargetSpeaker int     `form:"target_speaker" json:"target_speaker"`
	MorphRate     float32 `form:"morph_rate" json:"morph_rate"`
	CoreVersion   *string `form:"core_version,omitempty" json:"core_version,omitempty"`
}

// AddUserDictWordUserDictWordPostParams defines parameters for AddUserDictWordUserDictWordPost.
type AddUserDictWordUserDictWordPostParams struct {
	Surface       string     `form:"surface" json:"surface"`
	Pronunciation string     `form:"pronunciation" json:"pronunciation"`
	AccentType    int        `form:"accent_type" json:"accent_type"`
	WordType      *WordTypes `form:"word_type,omitempty" json:"word_type,omitempty"`
	Priority      *int       `form:"priority,omitempty" json:"priority,omitempty"`
}

// RewriteUserDictWordUserDictWordWordUuidPutParams defines parameters for RewriteUserDictWordUserDictWordWordUuidPut.
type RewriteUserDictWordUserDictWordWordUuidPutParams struct {
	Surface       string     `form:"surface" json:"surface"`
	Pronunciation string     `form:"pronunciation" json:"pronunciation"`
	AccentType    int        `form:"accent_type" json:"accent_type"`
	WordType      *WordTypes `form:"word_type,omitempty" json:"word_type,omitempty"`
	Priority      *int       `form:"priority,omitempty" json:"priority,omitempty"`
}

// ValidateKanaValidateKanaPostParams defines parameters for ValidateKanaValidateKanaPost.
type ValidateKanaValidateKanaPostParams struct {
	Text string `form:"text" json:"text"`
}

// AddPresetAddPresetPostJSONRequestBody defines body for AddPresetAddPresetPost for application/json ContentType.
type AddPresetAddPresetPostJSONRequestBody = Preset

// CancellableSynthesisCancellableSynthesisPostJSONRequestBody defines body for CancellableSynthesisCancellableSynthesisPost for application/json ContentType.
type CancellableSynthesisCancellableSynthesisPostJSONRequestBody = AudioQuery

// ConnectWavesConnectWavesPostJSONRequestBody defines body for ConnectWavesConnectWavesPost for application/json ContentType.
type ConnectWavesConnectWavesPostJSONRequestBody = ConnectWavesConnectWavesPostJSONBody

// ImportUserDictWordsImportUserDictPostJSONRequestBody defines body for ImportUserDictWordsImportUserDictPost for application/json ContentType.
type ImportUserDictWordsImportUserDictPostJSONRequestBody ImportUserDictWordsImportUserDictPostJSONBody

// MoraDataMoraDataPostJSONRequestBody defines body for MoraDataMoraDataPost for application/json ContentType.
type MoraDataMoraDataPostJSONRequestBody = MoraDataMoraDataPostJSONBody

// MoraLengthMoraLengthPostJSONRequestBody defines body for MoraLengthMoraLengthPost for application/json ContentType.
type MoraLengthMoraLengthPostJSONRequestBody = MoraLengthMoraLengthPostJSONBody

// MoraPitchMoraPitchPostJSONRequestBody defines body for MoraPitchMoraPitchPost for application/json ContentType.
type MoraPitchMoraPitchPostJSONRequestBody = MoraPitchMoraPitchPostJSONBody

// MorphableTargetsMorphableTargetsPostJSONRequestBody defines body for MorphableTargetsMorphableTargetsPost for application/json ContentType.
type MorphableTargetsMorphableTargetsPostJSONRequestBody = MorphableTargetsMorphableTargetsPostJSONBody

// MultiSynthesisMultiSynthesisPostJSONRequestBody defines body for MultiSynthesisMultiSynthesisPost for application/json ContentType.
type MultiSynthesisMultiSynthesisPostJSONRequestBody = MultiSynthesisMultiSynthesisPostJSONBody

// SettingPostSettingPostFormdataRequestBody defines body for SettingPostSettingPost for application/x-www-form-urlencoded ContentType.
type SettingPostSettingPostFormdataRequestBody = BodySettingPostSettingPost

// SynthesisSynthesisPostJSONRequestBody defines body for SynthesisSynthesisPost for application/json ContentType.
type SynthesisSynthesisPostJSONRequestBody = AudioQuery

// SynthesisMorphingSynthesisMorphingPostJSONRequestBody defines body for SynthesisMorphingSynthesisMorphingPost for application/json ContentType.
type SynthesisMorphingSynthesisMorphingPostJSONRequestBody = AudioQuery

// UpdatePresetUpdatePresetPostJSONRequestBody defines body for UpdatePresetUpdatePresetPost for application/json ContentType.
type UpdatePresetUpdatePresetPostJSONRequestBody = Preset

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AccentPhrasesAccentPhrasesPost request
	AccentPhrasesAccentPhrasesPost(ctx context.Context, params *AccentPhrasesAccentPhrasesPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPresetAddPresetPostWithBody request with any body
	AddPresetAddPresetPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPresetAddPresetPost(ctx context.Context, body AddPresetAddPresetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AudioQueryAudioQueryPost request
	AudioQueryAudioQueryPost(ctx context.Context, params *AudioQueryAudioQueryPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AudioQueryFromPresetAudioQueryFromPresetPost request
	AudioQueryFromPresetAudioQueryFromPresetPost(ctx context.Context, params *AudioQueryFromPresetAudioQueryFromPresetPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancellableSynthesisCancellableSynthesisPostWithBody request with any body
	CancellableSynthesisCancellableSynthesisPostWithBody(ctx context.Context, params *CancellableSynthesisCancellableSynthesisPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancellableSynthesisCancellableSynthesisPost(ctx context.Context, params *CancellableSynthesisCancellableSynthesisPostParams, body CancellableSynthesisCancellableSynthesisPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConnectWavesConnectWavesPostWithBody request with any body
	ConnectWavesConnectWavesPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConnectWavesConnectWavesPost(ctx context.Context, body ConnectWavesConnectWavesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreVersionsCoreVersionsGet request
	CoreVersionsCoreVersionsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePresetDeletePresetPost request
	DeletePresetDeletePresetPost(ctx context.Context, params *DeletePresetDeletePresetPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadableLibrariesDownloadableLibrariesGet request
	DownloadableLibrariesDownloadableLibrariesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngineManifestEngineManifestGet request
	EngineManifestEngineManifestGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportUserDictWordsImportUserDictPostWithBody request with any body
	ImportUserDictWordsImportUserDictPostWithBody(ctx context.Context, params *ImportUserDictWordsImportUserDictPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ImportUserDictWordsImportUserDictPost(ctx context.Context, params *ImportUserDictWordsImportUserDictPostParams, body ImportUserDictWordsImportUserDictPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InitializeSpeakerInitializeSpeakerPost request
	InitializeSpeakerInitializeSpeakerPost(ctx context.Context, params *InitializeSpeakerInitializeSpeakerPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstallLibraryInstallLibraryLibraryUuidPost request
	InstallLibraryInstallLibraryLibraryUuidPost(ctx context.Context, libraryUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstalledLibrariesInstalledLibrariesGet request
	InstalledLibrariesInstalledLibrariesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IsInitializedSpeakerIsInitializedSpeakerGet request
	IsInitializedSpeakerIsInitializedSpeakerGet(ctx context.Context, params *IsInitializedSpeakerIsInitializedSpeakerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoraDataMoraDataPostWithBody request with any body
	MoraDataMoraDataPostWithBody(ctx context.Context, params *MoraDataMoraDataPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MoraDataMoraDataPost(ctx context.Context, params *MoraDataMoraDataPostParams, body MoraDataMoraDataPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoraLengthMoraLengthPostWithBody request with any body
	MoraLengthMoraLengthPostWithBody(ctx context.Context, params *MoraLengthMoraLengthPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MoraLengthMoraLengthPost(ctx context.Context, params *MoraLengthMoraLengthPostParams, body MoraLengthMoraLengthPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoraPitchMoraPitchPostWithBody request with any body
	MoraPitchMoraPitchPostWithBody(ctx context.Context, params *MoraPitchMoraPitchPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MoraPitchMoraPitchPost(ctx context.Context, params *MoraPitchMoraPitchPostParams, body MoraPitchMoraPitchPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MorphableTargetsMorphableTargetsPostWithBody request with any body
	MorphableTargetsMorphableTargetsPostWithBody(ctx context.Context, params *MorphableTargetsMorphableTargetsPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MorphableTargetsMorphableTargetsPost(ctx context.Context, params *MorphableTargetsMorphableTargetsPostParams, body MorphableTargetsMorphableTargetsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MultiSynthesisMultiSynthesisPostWithBody request with any body
	MultiSynthesisMultiSynthesisPostWithBody(ctx context.Context, params *MultiSynthesisMultiSynthesisPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MultiSynthesisMultiSynthesisPost(ctx context.Context, params *MultiSynthesisMultiSynthesisPostParams, body MultiSynthesisMultiSynthesisPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPresetsPresetsGet request
	GetPresetsPresetsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SettingGetSettingGet request
	SettingGetSettingGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SettingPostSettingPostWithBody request with any body
	SettingPostSettingPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SettingPostSettingPostWithFormdataBody(ctx context.Context, body SettingPostSettingPostFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpeakerInfoSpeakerInfoGet request
	SpeakerInfoSpeakerInfoGet(ctx context.Context, params *SpeakerInfoSpeakerInfoGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpeakersSpeakersGet request
	SpeakersSpeakersGet(ctx context.Context, params *SpeakersSpeakersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SupportedDevicesSupportedDevicesGet request
	SupportedDevicesSupportedDevicesGet(ctx context.Context, params *SupportedDevicesSupportedDevicesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SynthesisSynthesisPostWithBody request with any body
	SynthesisSynthesisPostWithBody(ctx context.Context, params *SynthesisSynthesisPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SynthesisSynthesisPost(ctx context.Context, params *SynthesisSynthesisPostParams, body SynthesisSynthesisPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SynthesisMorphingSynthesisMorphingPostWithBody request with any body
	SynthesisMorphingSynthesisMorphingPostWithBody(ctx context.Context, params *SynthesisMorphingSynthesisMorphingPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SynthesisMorphingSynthesisMorphingPost(ctx context.Context, params *SynthesisMorphingSynthesisMorphingPostParams, body SynthesisMorphingSynthesisMorphingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UninstallLibraryUninstallLibraryLibraryUuidPost request
	UninstallLibraryUninstallLibraryLibraryUuidPost(ctx context.Context, libraryUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePresetUpdatePresetPostWithBody request with any body
	UpdatePresetUpdatePresetPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePresetUpdatePresetPost(ctx context.Context, body UpdatePresetUpdatePresetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserDictWordsUserDictGet request
	GetUserDictWordsUserDictGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddUserDictWordUserDictWordPost request
	AddUserDictWordUserDictWordPost(ctx context.Context, params *AddUserDictWordUserDictWordPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserDictWordUserDictWordWordUuidDelete request
	DeleteUserDictWordUserDictWordWordUuidDelete(ctx context.Context, wordUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RewriteUserDictWordUserDictWordWordUuidPut request
	RewriteUserDictWordUserDictWordWordUuidPut(ctx context.Context, wordUuid string, params *RewriteUserDictWordUserDictWordWordUuidPutParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateKanaValidateKanaPost request
	ValidateKanaValidateKanaPost(ctx context.Context, params *ValidateKanaValidateKanaPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VersionVersionGet request
	VersionVersionGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AccentPhrasesAccentPhrasesPost(ctx context.Context, params *AccentPhrasesAccentPhrasesPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccentPhrasesAccentPhrasesPostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPresetAddPresetPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPresetAddPresetPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPresetAddPresetPost(ctx context.Context, body AddPresetAddPresetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPresetAddPresetPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AudioQueryAudioQueryPost(ctx context.Context, params *AudioQueryAudioQueryPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAudioQueryAudioQueryPostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AudioQueryFromPresetAudioQueryFromPresetPost(ctx context.Context, params *AudioQueryFromPresetAudioQueryFromPresetPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAudioQueryFromPresetAudioQueryFromPresetPostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancellableSynthesisCancellableSynthesisPostWithBody(ctx context.Context, params *CancellableSynthesisCancellableSynthesisPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancellableSynthesisCancellableSynthesisPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancellableSynthesisCancellableSynthesisPost(ctx context.Context, params *CancellableSynthesisCancellableSynthesisPostParams, body CancellableSynthesisCancellableSynthesisPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancellableSynthesisCancellableSynthesisPostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConnectWavesConnectWavesPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConnectWavesConnectWavesPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConnectWavesConnectWavesPost(ctx context.Context, body ConnectWavesConnectWavesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConnectWavesConnectWavesPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreVersionsCoreVersionsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreVersionsCoreVersionsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePresetDeletePresetPost(ctx context.Context, params *DeletePresetDeletePresetPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePresetDeletePresetPostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadableLibrariesDownloadableLibrariesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadableLibrariesDownloadableLibrariesGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngineManifestEngineManifestGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngineManifestEngineManifestGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportUserDictWordsImportUserDictPostWithBody(ctx context.Context, params *ImportUserDictWordsImportUserDictPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportUserDictWordsImportUserDictPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportUserDictWordsImportUserDictPost(ctx context.Context, params *ImportUserDictWordsImportUserDictPostParams, body ImportUserDictWordsImportUserDictPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportUserDictWordsImportUserDictPostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InitializeSpeakerInitializeSpeakerPost(ctx context.Context, params *InitializeSpeakerInitializeSpeakerPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInitializeSpeakerInitializeSpeakerPostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstallLibraryInstallLibraryLibraryUuidPost(ctx context.Context, libraryUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstallLibraryInstallLibraryLibraryUuidPostRequest(c.Server, libraryUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstalledLibrariesInstalledLibrariesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstalledLibrariesInstalledLibrariesGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IsInitializedSpeakerIsInitializedSpeakerGet(ctx context.Context, params *IsInitializedSpeakerIsInitializedSpeakerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIsInitializedSpeakerIsInitializedSpeakerGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoraDataMoraDataPostWithBody(ctx context.Context, params *MoraDataMoraDataPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoraDataMoraDataPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoraDataMoraDataPost(ctx context.Context, params *MoraDataMoraDataPostParams, body MoraDataMoraDataPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoraDataMoraDataPostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoraLengthMoraLengthPostWithBody(ctx context.Context, params *MoraLengthMoraLengthPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoraLengthMoraLengthPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoraLengthMoraLengthPost(ctx context.Context, params *MoraLengthMoraLengthPostParams, body MoraLengthMoraLengthPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoraLengthMoraLengthPostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoraPitchMoraPitchPostWithBody(ctx context.Context, params *MoraPitchMoraPitchPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoraPitchMoraPitchPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoraPitchMoraPitchPost(ctx context.Context, params *MoraPitchMoraPitchPostParams, body MoraPitchMoraPitchPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoraPitchMoraPitchPostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MorphableTargetsMorphableTargetsPostWithBody(ctx context.Context, params *MorphableTargetsMorphableTargetsPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMorphableTargetsMorphableTargetsPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MorphableTargetsMorphableTargetsPost(ctx context.Context, params *MorphableTargetsMorphableTargetsPostParams, body MorphableTargetsMorphableTargetsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMorphableTargetsMorphableTargetsPostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MultiSynthesisMultiSynthesisPostWithBody(ctx context.Context, params *MultiSynthesisMultiSynthesisPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMultiSynthesisMultiSynthesisPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MultiSynthesisMultiSynthesisPost(ctx context.Context, params *MultiSynthesisMultiSynthesisPostParams, body MultiSynthesisMultiSynthesisPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMultiSynthesisMultiSynthesisPostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPresetsPresetsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPresetsPresetsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SettingGetSettingGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSettingGetSettingGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SettingPostSettingPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSettingPostSettingPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SettingPostSettingPostWithFormdataBody(ctx context.Context, body SettingPostSettingPostFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSettingPostSettingPostRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpeakerInfoSpeakerInfoGet(ctx context.Context, params *SpeakerInfoSpeakerInfoGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpeakerInfoSpeakerInfoGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpeakersSpeakersGet(ctx context.Context, params *SpeakersSpeakersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpeakersSpeakersGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SupportedDevicesSupportedDevicesGet(ctx context.Context, params *SupportedDevicesSupportedDevicesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSupportedDevicesSupportedDevicesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SynthesisSynthesisPostWithBody(ctx context.Context, params *SynthesisSynthesisPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSynthesisSynthesisPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SynthesisSynthesisPost(ctx context.Context, params *SynthesisSynthesisPostParams, body SynthesisSynthesisPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSynthesisSynthesisPostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SynthesisMorphingSynthesisMorphingPostWithBody(ctx context.Context, params *SynthesisMorphingSynthesisMorphingPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSynthesisMorphingSynthesisMorphingPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SynthesisMorphingSynthesisMorphingPost(ctx context.Context, params *SynthesisMorphingSynthesisMorphingPostParams, body SynthesisMorphingSynthesisMorphingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSynthesisMorphingSynthesisMorphingPostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UninstallLibraryUninstallLibraryLibraryUuidPost(ctx context.Context, libraryUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUninstallLibraryUninstallLibraryLibraryUuidPostRequest(c.Server, libraryUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePresetUpdatePresetPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePresetUpdatePresetPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePresetUpdatePresetPost(ctx context.Context, body UpdatePresetUpdatePresetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePresetUpdatePresetPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserDictWordsUserDictGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserDictWordsUserDictGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserDictWordUserDictWordPost(ctx context.Context, params *AddUserDictWordUserDictWordPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserDictWordUserDictWordPostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserDictWordUserDictWordWordUuidDelete(ctx context.Context, wordUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserDictWordUserDictWordWordUuidDeleteRequest(c.Server, wordUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RewriteUserDictWordUserDictWordWordUuidPut(ctx context.Context, wordUuid string, params *RewriteUserDictWordUserDictWordWordUuidPutParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRewriteUserDictWordUserDictWordWordUuidPutRequest(c.Server, wordUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateKanaValidateKanaPost(ctx context.Context, params *ValidateKanaValidateKanaPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateKanaValidateKanaPostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VersionVersionGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVersionVersionGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAccentPhrasesAccentPhrasesPostRequest generates requests for AccentPhrasesAccentPhrasesPost
func NewAccentPhrasesAccentPhrasesPostRequest(server string, params *AccentPhrasesAccentPhrasesPostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accent_phrases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text", runtime.ParamLocationQuery, params.Text); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "speaker", runtime.ParamLocationQuery, params.Speaker); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.IsKana != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_kana", runtime.ParamLocationQuery, *params.IsKana); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CoreVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "core_version", runtime.ParamLocationQuery, *params.CoreVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPresetAddPresetPostRequest calls the generic AddPresetAddPresetPost builder with application/json body
func NewAddPresetAddPresetPostRequest(server string, body AddPresetAddPresetPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPresetAddPresetPostRequestWithBody(server, "application/json", bodyReader)
}

// NewAddPresetAddPresetPostRequestWithBody generates requests for AddPresetAddPresetPost with any type of body
func NewAddPresetAddPresetPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/add_preset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAudioQueryAudioQueryPostRequest generates requests for AudioQueryAudioQueryPost
func NewAudioQueryAudioQueryPostRequest(server string, params *AudioQueryAudioQueryPostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio_query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text", runtime.ParamLocationQuery, params.Text); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "speaker", runtime.ParamLocationQuery, params.Speaker); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.CoreVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "core_version", runtime.ParamLocationQuery, *params.CoreVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAudioQueryFromPresetAudioQueryFromPresetPostRequest generates requests for AudioQueryFromPresetAudioQueryFromPresetPost
func NewAudioQueryFromPresetAudioQueryFromPresetPostRequest(server string, params *AudioQueryFromPresetAudioQueryFromPresetPostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio_query_from_preset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text", runtime.ParamLocationQuery, params.Text); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preset_id", runtime.ParamLocationQuery, params.PresetId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.CoreVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "core_version", runtime.ParamLocationQuery, *params.CoreVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancellableSynthesisCancellableSynthesisPostRequest calls the generic CancellableSynthesisCancellableSynthesisPost builder with application/json body
func NewCancellableSynthesisCancellableSynthesisPostRequest(server string, params *CancellableSynthesisCancellableSynthesisPostParams, body CancellableSynthesisCancellableSynthesisPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancellableSynthesisCancellableSynthesisPostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCancellableSynthesisCancellableSynthesisPostRequestWithBody generates requests for CancellableSynthesisCancellableSynthesisPost with any type of body
func NewCancellableSynthesisCancellableSynthesisPostRequestWithBody(server string, params *CancellableSynthesisCancellableSynthesisPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cancellable_synthesis")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "speaker", runtime.ParamLocationQuery, params.Speaker); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.CoreVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "core_version", runtime.ParamLocationQuery, *params.CoreVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConnectWavesConnectWavesPostRequest calls the generic ConnectWavesConnectWavesPost builder with application/json body
func NewConnectWavesConnectWavesPostRequest(server string, body ConnectWavesConnectWavesPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConnectWavesConnectWavesPostRequestWithBody(server, "application/json", bodyReader)
}

// NewConnectWavesConnectWavesPostRequestWithBody generates requests for ConnectWavesConnectWavesPost with any type of body
func NewConnectWavesConnectWavesPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connect_waves")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCoreVersionsCoreVersionsGetRequest generates requests for CoreVersionsCoreVersionsGet
func NewCoreVersionsCoreVersionsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core_versions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePresetDeletePresetPostRequest generates requests for DeletePresetDeletePresetPost
func NewDeletePresetDeletePresetPostRequest(server string, params *DeletePresetDeletePresetPostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete_preset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadableLibrariesDownloadableLibrariesGetRequest generates requests for DownloadableLibrariesDownloadableLibrariesGet
func NewDownloadableLibrariesDownloadableLibrariesGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/downloadable_libraries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngineManifestEngineManifestGetRequest generates requests for EngineManifestEngineManifestGet
func NewEngineManifestEngineManifestGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/engine_manifest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewImportUserDictWordsImportUserDictPostRequest calls the generic ImportUserDictWordsImportUserDictPost builder with application/json body
func NewImportUserDictWordsImportUserDictPostRequest(server string, params *ImportUserDictWordsImportUserDictPostParams, body ImportUserDictWordsImportUserDictPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewImportUserDictWordsImportUserDictPostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewImportUserDictWordsImportUserDictPostRequestWithBody generates requests for ImportUserDictWordsImportUserDictPost with any type of body
func NewImportUserDictWordsImportUserDictPostRequestWithBody(server string, params *ImportUserDictWordsImportUserDictPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/import_user_dict")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "override", runtime.ParamLocationQuery, params.Override); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInitializeSpeakerInitializeSpeakerPostRequest generates requests for InitializeSpeakerInitializeSpeakerPost
func NewInitializeSpeakerInitializeSpeakerPostRequest(server string, params *InitializeSpeakerInitializeSpeakerPostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/initialize_speaker")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "speaker", runtime.ParamLocationQuery, params.Speaker); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SkipReinit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip_reinit", runtime.ParamLocationQuery, *params.SkipReinit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CoreVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "core_version", runtime.ParamLocationQuery, *params.CoreVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstallLibraryInstallLibraryLibraryUuidPostRequest generates requests for InstallLibraryInstallLibraryLibraryUuidPost
func NewInstallLibraryInstallLibraryLibraryUuidPostRequest(server string, libraryUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "library_uuid", runtime.ParamLocationPath, libraryUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/install_library/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstalledLibrariesInstalledLibrariesGetRequest generates requests for InstalledLibrariesInstalledLibrariesGet
func NewInstalledLibrariesInstalledLibrariesGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/installed_libraries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIsInitializedSpeakerIsInitializedSpeakerGetRequest generates requests for IsInitializedSpeakerIsInitializedSpeakerGet
func NewIsInitializedSpeakerIsInitializedSpeakerGetRequest(server string, params *IsInitializedSpeakerIsInitializedSpeakerGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/is_initialized_speaker")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "speaker", runtime.ParamLocationQuery, params.Speaker); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.CoreVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "core_version", runtime.ParamLocationQuery, *params.CoreVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMoraDataMoraDataPostRequest calls the generic MoraDataMoraDataPost builder with application/json body
func NewMoraDataMoraDataPostRequest(server string, params *MoraDataMoraDataPostParams, body MoraDataMoraDataPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMoraDataMoraDataPostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewMoraDataMoraDataPostRequestWithBody generates requests for MoraDataMoraDataPost with any type of body
func NewMoraDataMoraDataPostRequestWithBody(server string, params *MoraDataMoraDataPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mora_data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "speaker", runtime.ParamLocationQuery, params.Speaker); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.CoreVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "core_version", runtime.ParamLocationQuery, *params.CoreVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMoraLengthMoraLengthPostRequest calls the generic MoraLengthMoraLengthPost builder with application/json body
func NewMoraLengthMoraLengthPostRequest(server string, params *MoraLengthMoraLengthPostParams, body MoraLengthMoraLengthPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMoraLengthMoraLengthPostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewMoraLengthMoraLengthPostRequestWithBody generates requests for MoraLengthMoraLengthPost with any type of body
func NewMoraLengthMoraLengthPostRequestWithBody(server string, params *MoraLengthMoraLengthPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mora_length")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "speaker", runtime.ParamLocationQuery, params.Speaker); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.CoreVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "core_version", runtime.ParamLocationQuery, *params.CoreVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMoraPitchMoraPitchPostRequest calls the generic MoraPitchMoraPitchPost builder with application/json body
func NewMoraPitchMoraPitchPostRequest(server string, params *MoraPitchMoraPitchPostParams, body MoraPitchMoraPitchPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMoraPitchMoraPitchPostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewMoraPitchMoraPitchPostRequestWithBody generates requests for MoraPitchMoraPitchPost with any type of body
func NewMoraPitchMoraPitchPostRequestWithBody(server string, params *MoraPitchMoraPitchPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mora_pitch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "speaker", runtime.ParamLocationQuery, params.Speaker); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.CoreVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "core_version", runtime.ParamLocationQuery, *params.CoreVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMorphableTargetsMorphableTargetsPostRequest calls the generic MorphableTargetsMorphableTargetsPost builder with application/json body
func NewMorphableTargetsMorphableTargetsPostRequest(server string, params *MorphableTargetsMorphableTargetsPostParams, body MorphableTargetsMorphableTargetsPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMorphableTargetsMorphableTargetsPostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewMorphableTargetsMorphableTargetsPostRequestWithBody generates requests for MorphableTargetsMorphableTargetsPost with any type of body
func NewMorphableTargetsMorphableTargetsPostRequestWithBody(server string, params *MorphableTargetsMorphableTargetsPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/morphable_targets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CoreVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "core_version", runtime.ParamLocationQuery, *params.CoreVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMultiSynthesisMultiSynthesisPostRequest calls the generic MultiSynthesisMultiSynthesisPost builder with application/json body
func NewMultiSynthesisMultiSynthesisPostRequest(server string, params *MultiSynthesisMultiSynthesisPostParams, body MultiSynthesisMultiSynthesisPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMultiSynthesisMultiSynthesisPostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewMultiSynthesisMultiSynthesisPostRequestWithBody generates requests for MultiSynthesisMultiSynthesisPost with any type of body
func NewMultiSynthesisMultiSynthesisPostRequestWithBody(server string, params *MultiSynthesisMultiSynthesisPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/multi_synthesis")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "speaker", runtime.ParamLocationQuery, params.Speaker); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.CoreVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "core_version", runtime.ParamLocationQuery, *params.CoreVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPresetsPresetsGetRequest generates requests for GetPresetsPresetsGet
func NewGetPresetsPresetsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/presets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSettingGetSettingGetRequest generates requests for SettingGetSettingGet
func NewSettingGetSettingGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setting")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSettingPostSettingPostRequestWithFormdataBody calls the generic SettingPostSettingPost builder with application/x-www-form-urlencoded body
func NewSettingPostSettingPostRequestWithFormdataBody(server string, body SettingPostSettingPostFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSettingPostSettingPostRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewSettingPostSettingPostRequestWithBody generates requests for SettingPostSettingPost with any type of body
func NewSettingPostSettingPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setting")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSpeakerInfoSpeakerInfoGetRequest generates requests for SpeakerInfoSpeakerInfoGet
func NewSpeakerInfoSpeakerInfoGetRequest(server string, params *SpeakerInfoSpeakerInfoGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/speaker_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "speaker_uuid", runtime.ParamLocationQuery, params.SpeakerUuid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.CoreVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "core_version", runtime.ParamLocationQuery, *params.CoreVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpeakersSpeakersGetRequest generates requests for SpeakersSpeakersGet
func NewSpeakersSpeakersGetRequest(server string, params *SpeakersSpeakersGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/speakers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CoreVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "core_version", runtime.ParamLocationQuery, *params.CoreVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSupportedDevicesSupportedDevicesGetRequest generates requests for SupportedDevicesSupportedDevicesGet
func NewSupportedDevicesSupportedDevicesGetRequest(server string, params *SupportedDevicesSupportedDevicesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/supported_devices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CoreVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "core_version", runtime.ParamLocationQuery, *params.CoreVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSynthesisSynthesisPostRequest calls the generic SynthesisSynthesisPost builder with application/json body
func NewSynthesisSynthesisPostRequest(server string, params *SynthesisSynthesisPostParams, body SynthesisSynthesisPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSynthesisSynthesisPostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSynthesisSynthesisPostRequestWithBody generates requests for SynthesisSynthesisPost with any type of body
func NewSynthesisSynthesisPostRequestWithBody(server string, params *SynthesisSynthesisPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/synthesis")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "speaker", runtime.ParamLocationQuery, params.Speaker); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.EnableInterrogativeUpspeak != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enable_interrogative_upspeak", runtime.ParamLocationQuery, *params.EnableInterrogativeUpspeak); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CoreVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "core_version", runtime.ParamLocationQuery, *params.CoreVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSynthesisMorphingSynthesisMorphingPostRequest calls the generic SynthesisMorphingSynthesisMorphingPost builder with application/json body
func NewSynthesisMorphingSynthesisMorphingPostRequest(server string, params *SynthesisMorphingSynthesisMorphingPostParams, body SynthesisMorphingSynthesisMorphingPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSynthesisMorphingSynthesisMorphingPostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSynthesisMorphingSynthesisMorphingPostRequestWithBody generates requests for SynthesisMorphingSynthesisMorphingPost with any type of body
func NewSynthesisMorphingSynthesisMorphingPostRequestWithBody(server string, params *SynthesisMorphingSynthesisMorphingPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/synthesis_morphing")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "base_speaker", runtime.ParamLocationQuery, params.BaseSpeaker); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_speaker", runtime.ParamLocationQuery, params.TargetSpeaker); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "morph_rate", runtime.ParamLocationQuery, params.MorphRate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.CoreVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "core_version", runtime.ParamLocationQuery, *params.CoreVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUninstallLibraryUninstallLibraryLibraryUuidPostRequest generates requests for UninstallLibraryUninstallLibraryLibraryUuidPost
func NewUninstallLibraryUninstallLibraryLibraryUuidPostRequest(server string, libraryUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "library_uuid", runtime.ParamLocationPath, libraryUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uninstall_library/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePresetUpdatePresetPostRequest calls the generic UpdatePresetUpdatePresetPost builder with application/json body
func NewUpdatePresetUpdatePresetPostRequest(server string, body UpdatePresetUpdatePresetPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePresetUpdatePresetPostRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdatePresetUpdatePresetPostRequestWithBody generates requests for UpdatePresetUpdatePresetPost with any type of body
func NewUpdatePresetUpdatePresetPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update_preset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserDictWordsUserDictGetRequest generates requests for GetUserDictWordsUserDictGet
func NewGetUserDictWordsUserDictGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user_dict")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddUserDictWordUserDictWordPostRequest generates requests for AddUserDictWordUserDictWordPost
func NewAddUserDictWordUserDictWordPostRequest(server string, params *AddUserDictWordUserDictWordPostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user_dict_word")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "surface", runtime.ParamLocationQuery, params.Surface); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pronunciation", runtime.ParamLocationQuery, params.Pronunciation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accent_type", runtime.ParamLocationQuery, params.AccentType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.WordType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "word_type", runtime.ParamLocationQuery, *params.WordType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Priority != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "priority", runtime.ParamLocationQuery, *params.Priority); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserDictWordUserDictWordWordUuidDeleteRequest generates requests for DeleteUserDictWordUserDictWordWordUuidDelete
func NewDeleteUserDictWordUserDictWordWordUuidDeleteRequest(server string, wordUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "word_uuid", runtime.ParamLocationPath, wordUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user_dict_word/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRewriteUserDictWordUserDictWordWordUuidPutRequest generates requests for RewriteUserDictWordUserDictWordWordUuidPut
func NewRewriteUserDictWordUserDictWordWordUuidPutRequest(server string, wordUuid string, params *RewriteUserDictWordUserDictWordWordUuidPutParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "word_uuid", runtime.ParamLocationPath, wordUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user_dict_word/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "surface", runtime.ParamLocationQuery, params.Surface); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pronunciation", runtime.ParamLocationQuery, params.Pronunciation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accent_type", runtime.ParamLocationQuery, params.AccentType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.WordType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "word_type", runtime.ParamLocationQuery, *params.WordType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Priority != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "priority", runtime.ParamLocationQuery, *params.Priority); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateKanaValidateKanaPostRequest generates requests for ValidateKanaValidateKanaPost
func NewValidateKanaValidateKanaPostRequest(server string, params *ValidateKanaValidateKanaPostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/validate_kana")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text", runtime.ParamLocationQuery, params.Text); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVersionVersionGetRequest generates requests for VersionVersionGet
func NewVersionVersionGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AccentPhrasesAccentPhrasesPostWithResponse request
	AccentPhrasesAccentPhrasesPostWithResponse(ctx context.Context, params *AccentPhrasesAccentPhrasesPostParams, reqEditors ...RequestEditorFn) (*AccentPhrasesAccentPhrasesPostResponse, error)

	// AddPresetAddPresetPostWithBodyWithResponse request with any body
	AddPresetAddPresetPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPresetAddPresetPostResponse, error)

	AddPresetAddPresetPostWithResponse(ctx context.Context, body AddPresetAddPresetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPresetAddPresetPostResponse, error)

	// AudioQueryAudioQueryPostWithResponse request
	AudioQueryAudioQueryPostWithResponse(ctx context.Context, params *AudioQueryAudioQueryPostParams, reqEditors ...RequestEditorFn) (*AudioQueryAudioQueryPostResponse, error)

	// AudioQueryFromPresetAudioQueryFromPresetPostWithResponse request
	AudioQueryFromPresetAudioQueryFromPresetPostWithResponse(ctx context.Context, params *AudioQueryFromPresetAudioQueryFromPresetPostParams, reqEditors ...RequestEditorFn) (*AudioQueryFromPresetAudioQueryFromPresetPostResponse, error)

	// CancellableSynthesisCancellableSynthesisPostWithBodyWithResponse request with any body
	CancellableSynthesisCancellableSynthesisPostWithBodyWithResponse(ctx context.Context, params *CancellableSynthesisCancellableSynthesisPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancellableSynthesisCancellableSynthesisPostResponse, error)

	CancellableSynthesisCancellableSynthesisPostWithResponse(ctx context.Context, params *CancellableSynthesisCancellableSynthesisPostParams, body CancellableSynthesisCancellableSynthesisPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CancellableSynthesisCancellableSynthesisPostResponse, error)

	// ConnectWavesConnectWavesPostWithBodyWithResponse request with any body
	ConnectWavesConnectWavesPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConnectWavesConnectWavesPostResponse, error)

	ConnectWavesConnectWavesPostWithResponse(ctx context.Context, body ConnectWavesConnectWavesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ConnectWavesConnectWavesPostResponse, error)

	// CoreVersionsCoreVersionsGetWithResponse request
	CoreVersionsCoreVersionsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreVersionsCoreVersionsGetResponse, error)

	// DeletePresetDeletePresetPostWithResponse request
	DeletePresetDeletePresetPostWithResponse(ctx context.Context, params *DeletePresetDeletePresetPostParams, reqEditors ...RequestEditorFn) (*DeletePresetDeletePresetPostResponse, error)

	// DownloadableLibrariesDownloadableLibrariesGetWithResponse request
	DownloadableLibrariesDownloadableLibrariesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DownloadableLibrariesDownloadableLibrariesGetResponse, error)

	// EngineManifestEngineManifestGetWithResponse request
	EngineManifestEngineManifestGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*EngineManifestEngineManifestGetResponse, error)

	// ImportUserDictWordsImportUserDictPostWithBodyWithResponse request with any body
	ImportUserDictWordsImportUserDictPostWithBodyWithResponse(ctx context.Context, params *ImportUserDictWordsImportUserDictPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportUserDictWordsImportUserDictPostResponse, error)

	ImportUserDictWordsImportUserDictPostWithResponse(ctx context.Context, params *ImportUserDictWordsImportUserDictPostParams, body ImportUserDictWordsImportUserDictPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportUserDictWordsImportUserDictPostResponse, error)

	// InitializeSpeakerInitializeSpeakerPostWithResponse request
	InitializeSpeakerInitializeSpeakerPostWithResponse(ctx context.Context, params *InitializeSpeakerInitializeSpeakerPostParams, reqEditors ...RequestEditorFn) (*InitializeSpeakerInitializeSpeakerPostResponse, error)

	// InstallLibraryInstallLibraryLibraryUuidPostWithResponse request
	InstallLibraryInstallLibraryLibraryUuidPostWithResponse(ctx context.Context, libraryUuid string, reqEditors ...RequestEditorFn) (*InstallLibraryInstallLibraryLibraryUuidPostResponse, error)

	// InstalledLibrariesInstalledLibrariesGetWithResponse request
	InstalledLibrariesInstalledLibrariesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InstalledLibrariesInstalledLibrariesGetResponse, error)

	// IsInitializedSpeakerIsInitializedSpeakerGetWithResponse request
	IsInitializedSpeakerIsInitializedSpeakerGetWithResponse(ctx context.Context, params *IsInitializedSpeakerIsInitializedSpeakerGetParams, reqEditors ...RequestEditorFn) (*IsInitializedSpeakerIsInitializedSpeakerGetResponse, error)

	// MoraDataMoraDataPostWithBodyWithResponse request with any body
	MoraDataMoraDataPostWithBodyWithResponse(ctx context.Context, params *MoraDataMoraDataPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoraDataMoraDataPostResponse, error)

	MoraDataMoraDataPostWithResponse(ctx context.Context, params *MoraDataMoraDataPostParams, body MoraDataMoraDataPostJSONRequestBody, reqEditors ...RequestEditorFn) (*MoraDataMoraDataPostResponse, error)

	// MoraLengthMoraLengthPostWithBodyWithResponse request with any body
	MoraLengthMoraLengthPostWithBodyWithResponse(ctx context.Context, params *MoraLengthMoraLengthPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoraLengthMoraLengthPostResponse, error)

	MoraLengthMoraLengthPostWithResponse(ctx context.Context, params *MoraLengthMoraLengthPostParams, body MoraLengthMoraLengthPostJSONRequestBody, reqEditors ...RequestEditorFn) (*MoraLengthMoraLengthPostResponse, error)

	// MoraPitchMoraPitchPostWithBodyWithResponse request with any body
	MoraPitchMoraPitchPostWithBodyWithResponse(ctx context.Context, params *MoraPitchMoraPitchPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoraPitchMoraPitchPostResponse, error)

	MoraPitchMoraPitchPostWithResponse(ctx context.Context, params *MoraPitchMoraPitchPostParams, body MoraPitchMoraPitchPostJSONRequestBody, reqEditors ...RequestEditorFn) (*MoraPitchMoraPitchPostResponse, error)

	// MorphableTargetsMorphableTargetsPostWithBodyWithResponse request with any body
	MorphableTargetsMorphableTargetsPostWithBodyWithResponse(ctx context.Context, params *MorphableTargetsMorphableTargetsPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MorphableTargetsMorphableTargetsPostResponse, error)

	MorphableTargetsMorphableTargetsPostWithResponse(ctx context.Context, params *MorphableTargetsMorphableTargetsPostParams, body MorphableTargetsMorphableTargetsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*MorphableTargetsMorphableTargetsPostResponse, error)

	// MultiSynthesisMultiSynthesisPostWithBodyWithResponse request with any body
	MultiSynthesisMultiSynthesisPostWithBodyWithResponse(ctx context.Context, params *MultiSynthesisMultiSynthesisPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MultiSynthesisMultiSynthesisPostResponse, error)

	MultiSynthesisMultiSynthesisPostWithResponse(ctx context.Context, params *MultiSynthesisMultiSynthesisPostParams, body MultiSynthesisMultiSynthesisPostJSONRequestBody, reqEditors ...RequestEditorFn) (*MultiSynthesisMultiSynthesisPostResponse, error)

	// GetPresetsPresetsGetWithResponse request
	GetPresetsPresetsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPresetsPresetsGetResponse, error)

	// SettingGetSettingGetWithResponse request
	SettingGetSettingGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SettingGetSettingGetResponse, error)

	// SettingPostSettingPostWithBodyWithResponse request with any body
	SettingPostSettingPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SettingPostSettingPostResponse, error)

	SettingPostSettingPostWithFormdataBodyWithResponse(ctx context.Context, body SettingPostSettingPostFormdataRequestBody, reqEditors ...RequestEditorFn) (*SettingPostSettingPostResponse, error)

	// SpeakerInfoSpeakerInfoGetWithResponse request
	SpeakerInfoSpeakerInfoGetWithResponse(ctx context.Context, params *SpeakerInfoSpeakerInfoGetParams, reqEditors ...RequestEditorFn) (*SpeakerInfoSpeakerInfoGetResponse, error)

	// SpeakersSpeakersGetWithResponse request
	SpeakersSpeakersGetWithResponse(ctx context.Context, params *SpeakersSpeakersGetParams, reqEditors ...RequestEditorFn) (*SpeakersSpeakersGetResponse, error)

	// SupportedDevicesSupportedDevicesGetWithResponse request
	SupportedDevicesSupportedDevicesGetWithResponse(ctx context.Context, params *SupportedDevicesSupportedDevicesGetParams, reqEditors ...RequestEditorFn) (*SupportedDevicesSupportedDevicesGetResponse, error)

	// SynthesisSynthesisPostWithBodyWithResponse request with any body
	SynthesisSynthesisPostWithBodyWithResponse(ctx context.Context, params *SynthesisSynthesisPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SynthesisSynthesisPostResponse, error)

	SynthesisSynthesisPostWithResponse(ctx context.Context, params *SynthesisSynthesisPostParams, body SynthesisSynthesisPostJSONRequestBody, reqEditors ...RequestEditorFn) (*SynthesisSynthesisPostResponse, error)

	// SynthesisMorphingSynthesisMorphingPostWithBodyWithResponse request with any body
	SynthesisMorphingSynthesisMorphingPostWithBodyWithResponse(ctx context.Context, params *SynthesisMorphingSynthesisMorphingPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SynthesisMorphingSynthesisMorphingPostResponse, error)

	SynthesisMorphingSynthesisMorphingPostWithResponse(ctx context.Context, params *SynthesisMorphingSynthesisMorphingPostParams, body SynthesisMorphingSynthesisMorphingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*SynthesisMorphingSynthesisMorphingPostResponse, error)

	// UninstallLibraryUninstallLibraryLibraryUuidPostWithResponse request
	UninstallLibraryUninstallLibraryLibraryUuidPostWithResponse(ctx context.Context, libraryUuid string, reqEditors ...RequestEditorFn) (*UninstallLibraryUninstallLibraryLibraryUuidPostResponse, error)

	// UpdatePresetUpdatePresetPostWithBodyWithResponse request with any body
	UpdatePresetUpdatePresetPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePresetUpdatePresetPostResponse, error)

	UpdatePresetUpdatePresetPostWithResponse(ctx context.Context, body UpdatePresetUpdatePresetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePresetUpdatePresetPostResponse, error)

	// GetUserDictWordsUserDictGetWithResponse request
	GetUserDictWordsUserDictGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserDictWordsUserDictGetResponse, error)

	// AddUserDictWordUserDictWordPostWithResponse request
	AddUserDictWordUserDictWordPostWithResponse(ctx context.Context, params *AddUserDictWordUserDictWordPostParams, reqEditors ...RequestEditorFn) (*AddUserDictWordUserDictWordPostResponse, error)

	// DeleteUserDictWordUserDictWordWordUuidDeleteWithResponse request
	DeleteUserDictWordUserDictWordWordUuidDeleteWithResponse(ctx context.Context, wordUuid string, reqEditors ...RequestEditorFn) (*DeleteUserDictWordUserDictWordWordUuidDeleteResponse, error)

	// RewriteUserDictWordUserDictWordWordUuidPutWithResponse request
	RewriteUserDictWordUserDictWordWordUuidPutWithResponse(ctx context.Context, wordUuid string, params *RewriteUserDictWordUserDictWordWordUuidPutParams, reqEditors ...RequestEditorFn) (*RewriteUserDictWordUserDictWordWordUuidPutResponse, error)

	// ValidateKanaValidateKanaPostWithResponse request
	ValidateKanaValidateKanaPostWithResponse(ctx context.Context, params *ValidateKanaValidateKanaPostParams, reqEditors ...RequestEditorFn) (*ValidateKanaValidateKanaPostResponse, error)

	// VersionVersionGetWithResponse request
	VersionVersionGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VersionVersionGetResponse, error)
}

type AccentPhrasesAccentPhrasesPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AccentPhrase
	JSON400      *ParseKanaBadRequest
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r AccentPhrasesAccentPhrasesPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccentPhrasesAccentPhrasesPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPresetAddPresetPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r AddPresetAddPresetPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPresetAddPresetPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AudioQueryAudioQueryPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AudioQuery
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r AudioQueryAudioQueryPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AudioQueryAudioQueryPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AudioQueryFromPresetAudioQueryFromPresetPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AudioQuery
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r AudioQueryFromPresetAudioQueryFromPresetPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AudioQueryFromPresetAudioQueryFromPresetPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancellableSynthesisCancellableSynthesisPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CancellableSynthesisCancellableSynthesisPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancellableSynthesisCancellableSynthesisPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConnectWavesConnectWavesPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ConnectWavesConnectWavesPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConnectWavesConnectWavesPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreVersionsCoreVersionsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r CoreVersionsCoreVersionsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreVersionsCoreVersionsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePresetDeletePresetPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DeletePresetDeletePresetPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePresetDeletePresetPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadableLibrariesDownloadableLibrariesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DownloadableLibrary
}

// Status returns HTTPResponse.Status
func (r DownloadableLibrariesDownloadableLibrariesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadableLibrariesDownloadableLibrariesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngineManifestEngineManifestGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngineManifest
}

// Status returns HTTPResponse.Status
func (r EngineManifestEngineManifestGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngineManifestEngineManifestGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportUserDictWordsImportUserDictPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ImportUserDictWordsImportUserDictPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportUserDictWordsImportUserDictPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InitializeSpeakerInitializeSpeakerPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r InitializeSpeakerInitializeSpeakerPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InitializeSpeakerInitializeSpeakerPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstallLibraryInstallLibraryLibraryUuidPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r InstallLibraryInstallLibraryLibraryUuidPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstallLibraryInstallLibraryLibraryUuidPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstalledLibrariesInstalledLibrariesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]InstalledLibrary
}

// Status returns HTTPResponse.Status
func (r InstalledLibrariesInstalledLibrariesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstalledLibrariesInstalledLibrariesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IsInitializedSpeakerIsInitializedSpeakerGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r IsInitializedSpeakerIsInitializedSpeakerGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IsInitializedSpeakerIsInitializedSpeakerGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoraDataMoraDataPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AccentPhrase
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r MoraDataMoraDataPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoraDataMoraDataPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoraLengthMoraLengthPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AccentPhrase
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r MoraLengthMoraLengthPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoraLengthMoraLengthPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoraPitchMoraPitchPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AccentPhrase
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r MoraPitchMoraPitchPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoraPitchMoraPitchPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MorphableTargetsMorphableTargetsPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]MorphableTargetInfo
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r MorphableTargetsMorphableTargetsPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MorphableTargetsMorphableTargetsPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MultiSynthesisMultiSynthesisPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r MultiSynthesisMultiSynthesisPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MultiSynthesisMultiSynthesisPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPresetsPresetsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Preset
}

// Status returns HTTPResponse.Status
func (r GetPresetsPresetsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPresetsPresetsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SettingGetSettingGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SettingGetSettingGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SettingGetSettingGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SettingPostSettingPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r SettingPostSettingPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SettingPostSettingPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpeakerInfoSpeakerInfoGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpeakerInfo
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r SpeakerInfoSpeakerInfoGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpeakerInfoSpeakerInfoGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpeakersSpeakersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Speaker
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r SpeakersSpeakersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpeakersSpeakersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SupportedDevicesSupportedDevicesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SupportedDevicesInfo
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r SupportedDevicesSupportedDevicesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SupportedDevicesSupportedDevicesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SynthesisSynthesisPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r SynthesisSynthesisPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SynthesisSynthesisPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SynthesisMorphingSynthesisMorphingPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r SynthesisMorphingSynthesisMorphingPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SynthesisMorphingSynthesisMorphingPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UninstallLibraryUninstallLibraryLibraryUuidPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UninstallLibraryUninstallLibraryLibraryUuidPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UninstallLibraryUninstallLibraryLibraryUuidPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePresetUpdatePresetPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UpdatePresetUpdatePresetPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePresetUpdatePresetPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserDictWordsUserDictGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]UserDictWord
}

// Status returns HTTPResponse.Status
func (r GetUserDictWordsUserDictGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserDictWordsUserDictGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUserDictWordUserDictWordPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r AddUserDictWordUserDictWordPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUserDictWordUserDictWordPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserDictWordUserDictWordWordUuidDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DeleteUserDictWordUserDictWordWordUuidDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserDictWordUserDictWordWordUuidDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RewriteUserDictWordUserDictWordWordUuidPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r RewriteUserDictWordUserDictWordWordUuidPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RewriteUserDictWordUserDictWordWordUuidPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateKanaValidateKanaPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
	JSON400      *ParseKanaBadRequest
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ValidateKanaValidateKanaPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateKanaValidateKanaPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VersionVersionGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VersionVersionGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VersionVersionGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AccentPhrasesAccentPhrasesPostWithResponse request returning *AccentPhrasesAccentPhrasesPostResponse
func (c *ClientWithResponses) AccentPhrasesAccentPhrasesPostWithResponse(ctx context.Context, params *AccentPhrasesAccentPhrasesPostParams, reqEditors ...RequestEditorFn) (*AccentPhrasesAccentPhrasesPostResponse, error) {
	rsp, err := c.AccentPhrasesAccentPhrasesPost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccentPhrasesAccentPhrasesPostResponse(rsp)
}

// AddPresetAddPresetPostWithBodyWithResponse request with arbitrary body returning *AddPresetAddPresetPostResponse
func (c *ClientWithResponses) AddPresetAddPresetPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPresetAddPresetPostResponse, error) {
	rsp, err := c.AddPresetAddPresetPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPresetAddPresetPostResponse(rsp)
}

func (c *ClientWithResponses) AddPresetAddPresetPostWithResponse(ctx context.Context, body AddPresetAddPresetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPresetAddPresetPostResponse, error) {
	rsp, err := c.AddPresetAddPresetPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPresetAddPresetPostResponse(rsp)
}

// AudioQueryAudioQueryPostWithResponse request returning *AudioQueryAudioQueryPostResponse
func (c *ClientWithResponses) AudioQueryAudioQueryPostWithResponse(ctx context.Context, params *AudioQueryAudioQueryPostParams, reqEditors ...RequestEditorFn) (*AudioQueryAudioQueryPostResponse, error) {
	rsp, err := c.AudioQueryAudioQueryPost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAudioQueryAudioQueryPostResponse(rsp)
}

// AudioQueryFromPresetAudioQueryFromPresetPostWithResponse request returning *AudioQueryFromPresetAudioQueryFromPresetPostResponse
func (c *ClientWithResponses) AudioQueryFromPresetAudioQueryFromPresetPostWithResponse(ctx context.Context, params *AudioQueryFromPresetAudioQueryFromPresetPostParams, reqEditors ...RequestEditorFn) (*AudioQueryFromPresetAudioQueryFromPresetPostResponse, error) {
	rsp, err := c.AudioQueryFromPresetAudioQueryFromPresetPost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAudioQueryFromPresetAudioQueryFromPresetPostResponse(rsp)
}

// CancellableSynthesisCancellableSynthesisPostWithBodyWithResponse request with arbitrary body returning *CancellableSynthesisCancellableSynthesisPostResponse
func (c *ClientWithResponses) CancellableSynthesisCancellableSynthesisPostWithBodyWithResponse(ctx context.Context, params *CancellableSynthesisCancellableSynthesisPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancellableSynthesisCancellableSynthesisPostResponse, error) {
	rsp, err := c.CancellableSynthesisCancellableSynthesisPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancellableSynthesisCancellableSynthesisPostResponse(rsp)
}

func (c *ClientWithResponses) CancellableSynthesisCancellableSynthesisPostWithResponse(ctx context.Context, params *CancellableSynthesisCancellableSynthesisPostParams, body CancellableSynthesisCancellableSynthesisPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CancellableSynthesisCancellableSynthesisPostResponse, error) {
	rsp, err := c.CancellableSynthesisCancellableSynthesisPost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancellableSynthesisCancellableSynthesisPostResponse(rsp)
}

// ConnectWavesConnectWavesPostWithBodyWithResponse request with arbitrary body returning *ConnectWavesConnectWavesPostResponse
func (c *ClientWithResponses) ConnectWavesConnectWavesPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConnectWavesConnectWavesPostResponse, error) {
	rsp, err := c.ConnectWavesConnectWavesPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConnectWavesConnectWavesPostResponse(rsp)
}

func (c *ClientWithResponses) ConnectWavesConnectWavesPostWithResponse(ctx context.Context, body ConnectWavesConnectWavesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ConnectWavesConnectWavesPostResponse, error) {
	rsp, err := c.ConnectWavesConnectWavesPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConnectWavesConnectWavesPostResponse(rsp)
}

// CoreVersionsCoreVersionsGetWithResponse request returning *CoreVersionsCoreVersionsGetResponse
func (c *ClientWithResponses) CoreVersionsCoreVersionsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreVersionsCoreVersionsGetResponse, error) {
	rsp, err := c.CoreVersionsCoreVersionsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreVersionsCoreVersionsGetResponse(rsp)
}

// DeletePresetDeletePresetPostWithResponse request returning *DeletePresetDeletePresetPostResponse
func (c *ClientWithResponses) DeletePresetDeletePresetPostWithResponse(ctx context.Context, params *DeletePresetDeletePresetPostParams, reqEditors ...RequestEditorFn) (*DeletePresetDeletePresetPostResponse, error) {
	rsp, err := c.DeletePresetDeletePresetPost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePresetDeletePresetPostResponse(rsp)
}

// DownloadableLibrariesDownloadableLibrariesGetWithResponse request returning *DownloadableLibrariesDownloadableLibrariesGetResponse
func (c *ClientWithResponses) DownloadableLibrariesDownloadableLibrariesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DownloadableLibrariesDownloadableLibrariesGetResponse, error) {
	rsp, err := c.DownloadableLibrariesDownloadableLibrariesGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadableLibrariesDownloadableLibrariesGetResponse(rsp)
}

// EngineManifestEngineManifestGetWithResponse request returning *EngineManifestEngineManifestGetResponse
func (c *ClientWithResponses) EngineManifestEngineManifestGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*EngineManifestEngineManifestGetResponse, error) {
	rsp, err := c.EngineManifestEngineManifestGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngineManifestEngineManifestGetResponse(rsp)
}

// ImportUserDictWordsImportUserDictPostWithBodyWithResponse request with arbitrary body returning *ImportUserDictWordsImportUserDictPostResponse
func (c *ClientWithResponses) ImportUserDictWordsImportUserDictPostWithBodyWithResponse(ctx context.Context, params *ImportUserDictWordsImportUserDictPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportUserDictWordsImportUserDictPostResponse, error) {
	rsp, err := c.ImportUserDictWordsImportUserDictPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportUserDictWordsImportUserDictPostResponse(rsp)
}

func (c *ClientWithResponses) ImportUserDictWordsImportUserDictPostWithResponse(ctx context.Context, params *ImportUserDictWordsImportUserDictPostParams, body ImportUserDictWordsImportUserDictPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportUserDictWordsImportUserDictPostResponse, error) {
	rsp, err := c.ImportUserDictWordsImportUserDictPost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportUserDictWordsImportUserDictPostResponse(rsp)
}

// InitializeSpeakerInitializeSpeakerPostWithResponse request returning *InitializeSpeakerInitializeSpeakerPostResponse
func (c *ClientWithResponses) InitializeSpeakerInitializeSpeakerPostWithResponse(ctx context.Context, params *InitializeSpeakerInitializeSpeakerPostParams, reqEditors ...RequestEditorFn) (*InitializeSpeakerInitializeSpeakerPostResponse, error) {
	rsp, err := c.InitializeSpeakerInitializeSpeakerPost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInitializeSpeakerInitializeSpeakerPostResponse(rsp)
}

// InstallLibraryInstallLibraryLibraryUuidPostWithResponse request returning *InstallLibraryInstallLibraryLibraryUuidPostResponse
func (c *ClientWithResponses) InstallLibraryInstallLibraryLibraryUuidPostWithResponse(ctx context.Context, libraryUuid string, reqEditors ...RequestEditorFn) (*InstallLibraryInstallLibraryLibraryUuidPostResponse, error) {
	rsp, err := c.InstallLibraryInstallLibraryLibraryUuidPost(ctx, libraryUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstallLibraryInstallLibraryLibraryUuidPostResponse(rsp)
}

// InstalledLibrariesInstalledLibrariesGetWithResponse request returning *InstalledLibrariesInstalledLibrariesGetResponse
func (c *ClientWithResponses) InstalledLibrariesInstalledLibrariesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InstalledLibrariesInstalledLibrariesGetResponse, error) {
	rsp, err := c.InstalledLibrariesInstalledLibrariesGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstalledLibrariesInstalledLibrariesGetResponse(rsp)
}

// IsInitializedSpeakerIsInitializedSpeakerGetWithResponse request returning *IsInitializedSpeakerIsInitializedSpeakerGetResponse
func (c *ClientWithResponses) IsInitializedSpeakerIsInitializedSpeakerGetWithResponse(ctx context.Context, params *IsInitializedSpeakerIsInitializedSpeakerGetParams, reqEditors ...RequestEditorFn) (*IsInitializedSpeakerIsInitializedSpeakerGetResponse, error) {
	rsp, err := c.IsInitializedSpeakerIsInitializedSpeakerGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIsInitializedSpeakerIsInitializedSpeakerGetResponse(rsp)
}

// MoraDataMoraDataPostWithBodyWithResponse request with arbitrary body returning *MoraDataMoraDataPostResponse
func (c *ClientWithResponses) MoraDataMoraDataPostWithBodyWithResponse(ctx context.Context, params *MoraDataMoraDataPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoraDataMoraDataPostResponse, error) {
	rsp, err := c.MoraDataMoraDataPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoraDataMoraDataPostResponse(rsp)
}

func (c *ClientWithResponses) MoraDataMoraDataPostWithResponse(ctx context.Context, params *MoraDataMoraDataPostParams, body MoraDataMoraDataPostJSONRequestBody, reqEditors ...RequestEditorFn) (*MoraDataMoraDataPostResponse, error) {
	rsp, err := c.MoraDataMoraDataPost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoraDataMoraDataPostResponse(rsp)
}

// MoraLengthMoraLengthPostWithBodyWithResponse request with arbitrary body returning *MoraLengthMoraLengthPostResponse
func (c *ClientWithResponses) MoraLengthMoraLengthPostWithBodyWithResponse(ctx context.Context, params *MoraLengthMoraLengthPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoraLengthMoraLengthPostResponse, error) {
	rsp, err := c.MoraLengthMoraLengthPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoraLengthMoraLengthPostResponse(rsp)
}

func (c *ClientWithResponses) MoraLengthMoraLengthPostWithResponse(ctx context.Context, params *MoraLengthMoraLengthPostParams, body MoraLengthMoraLengthPostJSONRequestBody, reqEditors ...RequestEditorFn) (*MoraLengthMoraLengthPostResponse, error) {
	rsp, err := c.MoraLengthMoraLengthPost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoraLengthMoraLengthPostResponse(rsp)
}

// MoraPitchMoraPitchPostWithBodyWithResponse request with arbitrary body returning *MoraPitchMoraPitchPostResponse
func (c *ClientWithResponses) MoraPitchMoraPitchPostWithBodyWithResponse(ctx context.Context, params *MoraPitchMoraPitchPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoraPitchMoraPitchPostResponse, error) {
	rsp, err := c.MoraPitchMoraPitchPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoraPitchMoraPitchPostResponse(rsp)
}

func (c *ClientWithResponses) MoraPitchMoraPitchPostWithResponse(ctx context.Context, params *MoraPitchMoraPitchPostParams, body MoraPitchMoraPitchPostJSONRequestBody, reqEditors ...RequestEditorFn) (*MoraPitchMoraPitchPostResponse, error) {
	rsp, err := c.MoraPitchMoraPitchPost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoraPitchMoraPitchPostResponse(rsp)
}

// MorphableTargetsMorphableTargetsPostWithBodyWithResponse request with arbitrary body returning *MorphableTargetsMorphableTargetsPostResponse
func (c *ClientWithResponses) MorphableTargetsMorphableTargetsPostWithBodyWithResponse(ctx context.Context, params *MorphableTargetsMorphableTargetsPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MorphableTargetsMorphableTargetsPostResponse, error) {
	rsp, err := c.MorphableTargetsMorphableTargetsPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMorphableTargetsMorphableTargetsPostResponse(rsp)
}

func (c *ClientWithResponses) MorphableTargetsMorphableTargetsPostWithResponse(ctx context.Context, params *MorphableTargetsMorphableTargetsPostParams, body MorphableTargetsMorphableTargetsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*MorphableTargetsMorphableTargetsPostResponse, error) {
	rsp, err := c.MorphableTargetsMorphableTargetsPost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMorphableTargetsMorphableTargetsPostResponse(rsp)
}

// MultiSynthesisMultiSynthesisPostWithBodyWithResponse request with arbitrary body returning *MultiSynthesisMultiSynthesisPostResponse
func (c *ClientWithResponses) MultiSynthesisMultiSynthesisPostWithBodyWithResponse(ctx context.Context, params *MultiSynthesisMultiSynthesisPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MultiSynthesisMultiSynthesisPostResponse, error) {
	rsp, err := c.MultiSynthesisMultiSynthesisPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMultiSynthesisMultiSynthesisPostResponse(rsp)
}

func (c *ClientWithResponses) MultiSynthesisMultiSynthesisPostWithResponse(ctx context.Context, params *MultiSynthesisMultiSynthesisPostParams, body MultiSynthesisMultiSynthesisPostJSONRequestBody, reqEditors ...RequestEditorFn) (*MultiSynthesisMultiSynthesisPostResponse, error) {
	rsp, err := c.MultiSynthesisMultiSynthesisPost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMultiSynthesisMultiSynthesisPostResponse(rsp)
}

// GetPresetsPresetsGetWithResponse request returning *GetPresetsPresetsGetResponse
func (c *ClientWithResponses) GetPresetsPresetsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPresetsPresetsGetResponse, error) {
	rsp, err := c.GetPresetsPresetsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPresetsPresetsGetResponse(rsp)
}

// SettingGetSettingGetWithResponse request returning *SettingGetSettingGetResponse
func (c *ClientWithResponses) SettingGetSettingGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SettingGetSettingGetResponse, error) {
	rsp, err := c.SettingGetSettingGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSettingGetSettingGetResponse(rsp)
}

// SettingPostSettingPostWithBodyWithResponse request with arbitrary body returning *SettingPostSettingPostResponse
func (c *ClientWithResponses) SettingPostSettingPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SettingPostSettingPostResponse, error) {
	rsp, err := c.SettingPostSettingPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSettingPostSettingPostResponse(rsp)
}

func (c *ClientWithResponses) SettingPostSettingPostWithFormdataBodyWithResponse(ctx context.Context, body SettingPostSettingPostFormdataRequestBody, reqEditors ...RequestEditorFn) (*SettingPostSettingPostResponse, error) {
	rsp, err := c.SettingPostSettingPostWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSettingPostSettingPostResponse(rsp)
}

// SpeakerInfoSpeakerInfoGetWithResponse request returning *SpeakerInfoSpeakerInfoGetResponse
func (c *ClientWithResponses) SpeakerInfoSpeakerInfoGetWithResponse(ctx context.Context, params *SpeakerInfoSpeakerInfoGetParams, reqEditors ...RequestEditorFn) (*SpeakerInfoSpeakerInfoGetResponse, error) {
	rsp, err := c.SpeakerInfoSpeakerInfoGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpeakerInfoSpeakerInfoGetResponse(rsp)
}

// SpeakersSpeakersGetWithResponse request returning *SpeakersSpeakersGetResponse
func (c *ClientWithResponses) SpeakersSpeakersGetWithResponse(ctx context.Context, params *SpeakersSpeakersGetParams, reqEditors ...RequestEditorFn) (*SpeakersSpeakersGetResponse, error) {
	rsp, err := c.SpeakersSpeakersGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpeakersSpeakersGetResponse(rsp)
}

// SupportedDevicesSupportedDevicesGetWithResponse request returning *SupportedDevicesSupportedDevicesGetResponse
func (c *ClientWithResponses) SupportedDevicesSupportedDevicesGetWithResponse(ctx context.Context, params *SupportedDevicesSupportedDevicesGetParams, reqEditors ...RequestEditorFn) (*SupportedDevicesSupportedDevicesGetResponse, error) {
	rsp, err := c.SupportedDevicesSupportedDevicesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSupportedDevicesSupportedDevicesGetResponse(rsp)
}

// SynthesisSynthesisPostWithBodyWithResponse request with arbitrary body returning *SynthesisSynthesisPostResponse
func (c *ClientWithResponses) SynthesisSynthesisPostWithBodyWithResponse(ctx context.Context, params *SynthesisSynthesisPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SynthesisSynthesisPostResponse, error) {
	rsp, err := c.SynthesisSynthesisPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSynthesisSynthesisPostResponse(rsp)
}

func (c *ClientWithResponses) SynthesisSynthesisPostWithResponse(ctx context.Context, params *SynthesisSynthesisPostParams, body SynthesisSynthesisPostJSONRequestBody, reqEditors ...RequestEditorFn) (*SynthesisSynthesisPostResponse, error) {
	rsp, err := c.SynthesisSynthesisPost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSynthesisSynthesisPostResponse(rsp)
}

// SynthesisMorphingSynthesisMorphingPostWithBodyWithResponse request with arbitrary body returning *SynthesisMorphingSynthesisMorphingPostResponse
func (c *ClientWithResponses) SynthesisMorphingSynthesisMorphingPostWithBodyWithResponse(ctx context.Context, params *SynthesisMorphingSynthesisMorphingPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SynthesisMorphingSynthesisMorphingPostResponse, error) {
	rsp, err := c.SynthesisMorphingSynthesisMorphingPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSynthesisMorphingSynthesisMorphingPostResponse(rsp)
}

func (c *ClientWithResponses) SynthesisMorphingSynthesisMorphingPostWithResponse(ctx context.Context, params *SynthesisMorphingSynthesisMorphingPostParams, body SynthesisMorphingSynthesisMorphingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*SynthesisMorphingSynthesisMorphingPostResponse, error) {
	rsp, err := c.SynthesisMorphingSynthesisMorphingPost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSynthesisMorphingSynthesisMorphingPostResponse(rsp)
}

// UninstallLibraryUninstallLibraryLibraryUuidPostWithResponse request returning *UninstallLibraryUninstallLibraryLibraryUuidPostResponse
func (c *ClientWithResponses) UninstallLibraryUninstallLibraryLibraryUuidPostWithResponse(ctx context.Context, libraryUuid string, reqEditors ...RequestEditorFn) (*UninstallLibraryUninstallLibraryLibraryUuidPostResponse, error) {
	rsp, err := c.UninstallLibraryUninstallLibraryLibraryUuidPost(ctx, libraryUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUninstallLibraryUninstallLibraryLibraryUuidPostResponse(rsp)
}

// UpdatePresetUpdatePresetPostWithBodyWithResponse request with arbitrary body returning *UpdatePresetUpdatePresetPostResponse
func (c *ClientWithResponses) UpdatePresetUpdatePresetPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePresetUpdatePresetPostResponse, error) {
	rsp, err := c.UpdatePresetUpdatePresetPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePresetUpdatePresetPostResponse(rsp)
}

func (c *ClientWithResponses) UpdatePresetUpdatePresetPostWithResponse(ctx context.Context, body UpdatePresetUpdatePresetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePresetUpdatePresetPostResponse, error) {
	rsp, err := c.UpdatePresetUpdatePresetPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePresetUpdatePresetPostResponse(rsp)
}

// GetUserDictWordsUserDictGetWithResponse request returning *GetUserDictWordsUserDictGetResponse
func (c *ClientWithResponses) GetUserDictWordsUserDictGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserDictWordsUserDictGetResponse, error) {
	rsp, err := c.GetUserDictWordsUserDictGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserDictWordsUserDictGetResponse(rsp)
}

// AddUserDictWordUserDictWordPostWithResponse request returning *AddUserDictWordUserDictWordPostResponse
func (c *ClientWithResponses) AddUserDictWordUserDictWordPostWithResponse(ctx context.Context, params *AddUserDictWordUserDictWordPostParams, reqEditors ...RequestEditorFn) (*AddUserDictWordUserDictWordPostResponse, error) {
	rsp, err := c.AddUserDictWordUserDictWordPost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserDictWordUserDictWordPostResponse(rsp)
}

// DeleteUserDictWordUserDictWordWordUuidDeleteWithResponse request returning *DeleteUserDictWordUserDictWordWordUuidDeleteResponse
func (c *ClientWithResponses) DeleteUserDictWordUserDictWordWordUuidDeleteWithResponse(ctx context.Context, wordUuid string, reqEditors ...RequestEditorFn) (*DeleteUserDictWordUserDictWordWordUuidDeleteResponse, error) {
	rsp, err := c.DeleteUserDictWordUserDictWordWordUuidDelete(ctx, wordUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserDictWordUserDictWordWordUuidDeleteResponse(rsp)
}

// RewriteUserDictWordUserDictWordWordUuidPutWithResponse request returning *RewriteUserDictWordUserDictWordWordUuidPutResponse
func (c *ClientWithResponses) RewriteUserDictWordUserDictWordWordUuidPutWithResponse(ctx context.Context, wordUuid string, params *RewriteUserDictWordUserDictWordWordUuidPutParams, reqEditors ...RequestEditorFn) (*RewriteUserDictWordUserDictWordWordUuidPutResponse, error) {
	rsp, err := c.RewriteUserDictWordUserDictWordWordUuidPut(ctx, wordUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRewriteUserDictWordUserDictWordWordUuidPutResponse(rsp)
}

// ValidateKanaValidateKanaPostWithResponse request returning *ValidateKanaValidateKanaPostResponse
func (c *ClientWithResponses) ValidateKanaValidateKanaPostWithResponse(ctx context.Context, params *ValidateKanaValidateKanaPostParams, reqEditors ...RequestEditorFn) (*ValidateKanaValidateKanaPostResponse, error) {
	rsp, err := c.ValidateKanaValidateKanaPost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateKanaValidateKanaPostResponse(rsp)
}

// VersionVersionGetWithResponse request returning *VersionVersionGetResponse
func (c *ClientWithResponses) VersionVersionGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VersionVersionGetResponse, error) {
	rsp, err := c.VersionVersionGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVersionVersionGetResponse(rsp)
}

// ParseAccentPhrasesAccentPhrasesPostResponse parses an HTTP response from a AccentPhrasesAccentPhrasesPostWithResponse call
func ParseAccentPhrasesAccentPhrasesPostResponse(rsp *http.Response) (*AccentPhrasesAccentPhrasesPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccentPhrasesAccentPhrasesPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AccentPhrase
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ParseKanaBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAddPresetAddPresetPostResponse parses an HTTP response from a AddPresetAddPresetPostWithResponse call
func ParseAddPresetAddPresetPostResponse(rsp *http.Response) (*AddPresetAddPresetPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPresetAddPresetPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAudioQueryAudioQueryPostResponse parses an HTTP response from a AudioQueryAudioQueryPostWithResponse call
func ParseAudioQueryAudioQueryPostResponse(rsp *http.Response) (*AudioQueryAudioQueryPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AudioQueryAudioQueryPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AudioQuery
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAudioQueryFromPresetAudioQueryFromPresetPostResponse parses an HTTP response from a AudioQueryFromPresetAudioQueryFromPresetPostWithResponse call
func ParseAudioQueryFromPresetAudioQueryFromPresetPostResponse(rsp *http.Response) (*AudioQueryFromPresetAudioQueryFromPresetPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AudioQueryFromPresetAudioQueryFromPresetPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AudioQuery
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCancellableSynthesisCancellableSynthesisPostResponse parses an HTTP response from a CancellableSynthesisCancellableSynthesisPostWithResponse call
func ParseCancellableSynthesisCancellableSynthesisPostResponse(rsp *http.Response) (*CancellableSynthesisCancellableSynthesisPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancellableSynthesisCancellableSynthesisPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseConnectWavesConnectWavesPostResponse parses an HTTP response from a ConnectWavesConnectWavesPostWithResponse call
func ParseConnectWavesConnectWavesPostResponse(rsp *http.Response) (*ConnectWavesConnectWavesPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConnectWavesConnectWavesPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCoreVersionsCoreVersionsGetResponse parses an HTTP response from a CoreVersionsCoreVersionsGetWithResponse call
func ParseCoreVersionsCoreVersionsGetResponse(rsp *http.Response) (*CoreVersionsCoreVersionsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreVersionsCoreVersionsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePresetDeletePresetPostResponse parses an HTTP response from a DeletePresetDeletePresetPostWithResponse call
func ParseDeletePresetDeletePresetPostResponse(rsp *http.Response) (*DeletePresetDeletePresetPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePresetDeletePresetPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDownloadableLibrariesDownloadableLibrariesGetResponse parses an HTTP response from a DownloadableLibrariesDownloadableLibrariesGetWithResponse call
func ParseDownloadableLibrariesDownloadableLibrariesGetResponse(rsp *http.Response) (*DownloadableLibrariesDownloadableLibrariesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadableLibrariesDownloadableLibrariesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DownloadableLibrary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngineManifestEngineManifestGetResponse parses an HTTP response from a EngineManifestEngineManifestGetWithResponse call
func ParseEngineManifestEngineManifestGetResponse(rsp *http.Response) (*EngineManifestEngineManifestGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngineManifestEngineManifestGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngineManifest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseImportUserDictWordsImportUserDictPostResponse parses an HTTP response from a ImportUserDictWordsImportUserDictPostWithResponse call
func ParseImportUserDictWordsImportUserDictPostResponse(rsp *http.Response) (*ImportUserDictWordsImportUserDictPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportUserDictWordsImportUserDictPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseInitializeSpeakerInitializeSpeakerPostResponse parses an HTTP response from a InitializeSpeakerInitializeSpeakerPostWithResponse call
func ParseInitializeSpeakerInitializeSpeakerPostResponse(rsp *http.Response) (*InitializeSpeakerInitializeSpeakerPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InitializeSpeakerInitializeSpeakerPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseInstallLibraryInstallLibraryLibraryUuidPostResponse parses an HTTP response from a InstallLibraryInstallLibraryLibraryUuidPostWithResponse call
func ParseInstallLibraryInstallLibraryLibraryUuidPostResponse(rsp *http.Response) (*InstallLibraryInstallLibraryLibraryUuidPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstallLibraryInstallLibraryLibraryUuidPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseInstalledLibrariesInstalledLibrariesGetResponse parses an HTTP response from a InstalledLibrariesInstalledLibrariesGetWithResponse call
func ParseInstalledLibrariesInstalledLibrariesGetResponse(rsp *http.Response) (*InstalledLibrariesInstalledLibrariesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstalledLibrariesInstalledLibrariesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]InstalledLibrary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIsInitializedSpeakerIsInitializedSpeakerGetResponse parses an HTTP response from a IsInitializedSpeakerIsInitializedSpeakerGetWithResponse call
func ParseIsInitializedSpeakerIsInitializedSpeakerGetResponse(rsp *http.Response) (*IsInitializedSpeakerIsInitializedSpeakerGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IsInitializedSpeakerIsInitializedSpeakerGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseMoraDataMoraDataPostResponse parses an HTTP response from a MoraDataMoraDataPostWithResponse call
func ParseMoraDataMoraDataPostResponse(rsp *http.Response) (*MoraDataMoraDataPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoraDataMoraDataPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AccentPhrase
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseMoraLengthMoraLengthPostResponse parses an HTTP response from a MoraLengthMoraLengthPostWithResponse call
func ParseMoraLengthMoraLengthPostResponse(rsp *http.Response) (*MoraLengthMoraLengthPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoraLengthMoraLengthPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AccentPhrase
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseMoraPitchMoraPitchPostResponse parses an HTTP response from a MoraPitchMoraPitchPostWithResponse call
func ParseMoraPitchMoraPitchPostResponse(rsp *http.Response) (*MoraPitchMoraPitchPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoraPitchMoraPitchPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AccentPhrase
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseMorphableTargetsMorphableTargetsPostResponse parses an HTTP response from a MorphableTargetsMorphableTargetsPostWithResponse call
func ParseMorphableTargetsMorphableTargetsPostResponse(rsp *http.Response) (*MorphableTargetsMorphableTargetsPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MorphableTargetsMorphableTargetsPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]MorphableTargetInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseMultiSynthesisMultiSynthesisPostResponse parses an HTTP response from a MultiSynthesisMultiSynthesisPostWithResponse call
func ParseMultiSynthesisMultiSynthesisPostResponse(rsp *http.Response) (*MultiSynthesisMultiSynthesisPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MultiSynthesisMultiSynthesisPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetPresetsPresetsGetResponse parses an HTTP response from a GetPresetsPresetsGetWithResponse call
func ParseGetPresetsPresetsGetResponse(rsp *http.Response) (*GetPresetsPresetsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPresetsPresetsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Preset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSettingGetSettingGetResponse parses an HTTP response from a SettingGetSettingGetWithResponse call
func ParseSettingGetSettingGetResponse(rsp *http.Response) (*SettingGetSettingGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SettingGetSettingGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSettingPostSettingPostResponse parses an HTTP response from a SettingPostSettingPostWithResponse call
func ParseSettingPostSettingPostResponse(rsp *http.Response) (*SettingPostSettingPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SettingPostSettingPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSpeakerInfoSpeakerInfoGetResponse parses an HTTP response from a SpeakerInfoSpeakerInfoGetWithResponse call
func ParseSpeakerInfoSpeakerInfoGetResponse(rsp *http.Response) (*SpeakerInfoSpeakerInfoGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpeakerInfoSpeakerInfoGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpeakerInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSpeakersSpeakersGetResponse parses an HTTP response from a SpeakersSpeakersGetWithResponse call
func ParseSpeakersSpeakersGetResponse(rsp *http.Response) (*SpeakersSpeakersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpeakersSpeakersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Speaker
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSupportedDevicesSupportedDevicesGetResponse parses an HTTP response from a SupportedDevicesSupportedDevicesGetWithResponse call
func ParseSupportedDevicesSupportedDevicesGetResponse(rsp *http.Response) (*SupportedDevicesSupportedDevicesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SupportedDevicesSupportedDevicesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SupportedDevicesInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSynthesisSynthesisPostResponse parses an HTTP response from a SynthesisSynthesisPostWithResponse call
func ParseSynthesisSynthesisPostResponse(rsp *http.Response) (*SynthesisSynthesisPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SynthesisSynthesisPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSynthesisMorphingSynthesisMorphingPostResponse parses an HTTP response from a SynthesisMorphingSynthesisMorphingPostWithResponse call
func ParseSynthesisMorphingSynthesisMorphingPostResponse(rsp *http.Response) (*SynthesisMorphingSynthesisMorphingPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SynthesisMorphingSynthesisMorphingPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUninstallLibraryUninstallLibraryLibraryUuidPostResponse parses an HTTP response from a UninstallLibraryUninstallLibraryLibraryUuidPostWithResponse call
func ParseUninstallLibraryUninstallLibraryLibraryUuidPostResponse(rsp *http.Response) (*UninstallLibraryUninstallLibraryLibraryUuidPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UninstallLibraryUninstallLibraryLibraryUuidPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdatePresetUpdatePresetPostResponse parses an HTTP response from a UpdatePresetUpdatePresetPostWithResponse call
func ParseUpdatePresetUpdatePresetPostResponse(rsp *http.Response) (*UpdatePresetUpdatePresetPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePresetUpdatePresetPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetUserDictWordsUserDictGetResponse parses an HTTP response from a GetUserDictWordsUserDictGetWithResponse call
func ParseGetUserDictWordsUserDictGetResponse(rsp *http.Response) (*GetUserDictWordsUserDictGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserDictWordsUserDictGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]UserDictWord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddUserDictWordUserDictWordPostResponse parses an HTTP response from a AddUserDictWordUserDictWordPostWithResponse call
func ParseAddUserDictWordUserDictWordPostResponse(rsp *http.Response) (*AddUserDictWordUserDictWordPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddUserDictWordUserDictWordPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteUserDictWordUserDictWordWordUuidDeleteResponse parses an HTTP response from a DeleteUserDictWordUserDictWordWordUuidDeleteWithResponse call
func ParseDeleteUserDictWordUserDictWordWordUuidDeleteResponse(rsp *http.Response) (*DeleteUserDictWordUserDictWordWordUuidDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserDictWordUserDictWordWordUuidDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseRewriteUserDictWordUserDictWordWordUuidPutResponse parses an HTTP response from a RewriteUserDictWordUserDictWordWordUuidPutWithResponse call
func ParseRewriteUserDictWordUserDictWordWordUuidPutResponse(rsp *http.Response) (*RewriteUserDictWordUserDictWordWordUuidPutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RewriteUserDictWordUserDictWordWordUuidPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseValidateKanaValidateKanaPostResponse parses an HTTP response from a ValidateKanaValidateKanaPostWithResponse call
func ParseValidateKanaValidateKanaPostResponse(rsp *http.Response) (*ValidateKanaValidateKanaPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateKanaValidateKanaPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ParseKanaBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseVersionVersionGetResponse parses an HTTP response from a VersionVersionGetWithResponse call
func ParseVersionVersionGetResponse(rsp *http.Response) (*VersionVersionGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VersionVersionGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wAAAP//bE5MHJapAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
